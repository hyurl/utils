{"version":3,"file":"mixins.js","sources":["../../../../../node_modules/@ayonli/jsext/esm/mixins.js"],"sourcesContent":["import { hasOwn } from './object/index.js';\n\n/**\n * Merges properties and methods only if they're missing in the class.\n */\nfunction mergeIfNotExists(proto, source, mergeSuper = false) {\n    const props = Reflect.ownKeys(source);\n    for (const prop of props) {\n        if (prop == \"constructor\") {\n            continue;\n        }\n        else if (mergeSuper) {\n            // When merging properties from super classes, the properties in the\n            // base class has the first priority and shall not be overwrite.\n            if (!(prop in proto)) {\n                setProp(proto, source, prop);\n            }\n        }\n        else if (!hasOwn(proto, prop)) {\n            setProp(proto, source, prop);\n        }\n    }\n    return proto;\n}\n/**\n * Merges properties and methods across the prototype chain.\n */\nfunction mergeHierarchy(ctor, mixin, mergeSuper = false) {\n    mergeIfNotExists(ctor.prototype, mixin.prototype, mergeSuper);\n    const _super = Object.getPrototypeOf(mixin);\n    // Every user defined class or functions that can be instantiated have their\n    // own names, if no name appears, that means the function has traveled to \n    // the root of the hierarchical tree.\n    if (_super.name) {\n        mergeHierarchy(ctor, _super, true);\n    }\n}\n/**\n * Sets property for prototype based on the given source and prop name properly.\n */\nfunction setProp(proto, source, prop) {\n    const desc = Object.getOwnPropertyDescriptor(source, prop);\n    if (desc) {\n        Object.defineProperty(proto, prop, desc);\n    }\n    else {\n        proto[prop] = source[prop];\n    }\n}\nfunction mixins(base, ...mixins) {\n    const obj = { ctor: null };\n    obj.ctor = class extends base {\n    }; // make sure this class has no name\n    for (const mixin of mixins) {\n        if (typeof mixin == \"function\") {\n            mergeHierarchy(obj.ctor, mixin);\n        }\n        else if (mixin && typeof mixin == \"object\") {\n            mergeIfNotExists(obj.ctor.prototype, mixin);\n        }\n        else {\n            throw new TypeError(\"mixin must be a constructor or an object\");\n        }\n    }\n    return obj.ctor;\n}\n/**\n * Checks if a class is a subclass of another class.\n *\n * @example\n * ```ts\n * class Moment extends Date {}\n *\n * console.assert(isSubclassOf(Moment, Date));\n * console.assert(isSubclassOf(Moment, Object)); // all classes are subclasses of Object\n * ```\n */\nfunction isSubclassOf(ctor1, ctor2) {\n    return typeof ctor1 === \"function\"\n        && typeof ctor2 === \"function\"\n        && ctor1.prototype instanceof ctor2;\n}\n\nexport { mixins as default, isSubclassOf };\n//# sourceMappingURL=mixins.js.map\n"],"names":[],"mappings":"AAkEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE;AACpC,IAAI,OAAO,OAAO,KAAK,KAAK,UAAU;AACtC,WAAW,OAAO,KAAK,KAAK,UAAU;AACtC,WAAW,KAAK,CAAC,SAAS,YAAY,KAAK,CAAC;AAC5C;;;;","x_google_ignoreList":[0]}