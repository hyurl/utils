{"version":3,"file":"patch.js","sources":["../patch.ts"],"sourcesContent":["import { isDictLike } from \"is-like\";\nimport { isValid } from \"@ayonli/jsext/object\";\nimport isEmpty from \"./isEmpty.ts\";\n/**\n * Patches the differences onto the `origin` object from the `input` object. If\n * a property exists in both objects and the values are not equal, the `input`\n * one will be taken. However, those properties that are only presents in the\n * `origin` object will remain untouched.\n *\n * NOTE: This function mutates the `origin` object and returns the patched\n * differences, when patching, any void value in the `input` object will be\n * ignored.\n *\n * This function is very useful, for example, a client issued a patch of the\n * resource and the server wants to know what properties has been modified by\n * this update so that it can perform some extra operations to provide a better\n * user experience.\n */\nexport default function patch(origin, input, deep = false, ignoreEmptyStrings = false) {\n    return doPatch(origin, input, deep, ignoreEmptyStrings, false);\n}\nfunction doPatch(origin, input, deep, ignoreEmptyStrings, isChildNode) {\n    if (isDictLike(origin) && isDictLike(input)) {\n        let keys = Reflect.ownKeys(input);\n        let result = {};\n        keys.forEach(key => {\n            if (origin[key] !== input[key] &&\n                isValid(input[key]) && // ignore invalid values\n                (!ignoreEmptyStrings || input[key] !== \"\")) {\n                if (deep && isDictLike(origin[key]) && isDictLike(input[key])) {\n                    let _result = doPatch(origin[key], input[key], deep, ignoreEmptyStrings, true);\n                    if (!isEmpty(_result)) {\n                        result[key] = _result;\n                        Object.assign(origin[key], input[key]);\n                    }\n                }\n                else {\n                    result[key] = origin[key] = input[key];\n                }\n            }\n        });\n        return result;\n    }\n    else if (isChildNode) {\n        return input;\n    }\n    else {\n        return {};\n    }\n}\n//# sourceMappingURL=patch.js.map"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAAS,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,GAAG,KAAK,EAAE,kBAAkB,GAAG,KAAK,EAAE;AACvF,IAAI,OAAO,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC;AACnE,CAAC;AACD,SAAS,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,kBAAkB,EAAE,WAAW,EAAE;AACvE,IAAI,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;AACjD,QAAQ,IAAI,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC1C,QAAQ,IAAI,MAAM,GAAG,EAAE,CAAC;AACxB,QAAQ,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI;AAC5B,YAAY,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,GAAG,CAAC;AAC1C,gBAAgB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACnC,iBAAiB,CAAC,kBAAkB,IAAI,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,EAAE;AAC5D,gBAAgB,IAAI,IAAI,IAAI,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;AAC/E,oBAAoB,IAAI,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAAC;AACnG,oBAAoB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;AAC3C,wBAAwB,MAAM,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;AAC9C,wBAAwB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/D,qBAAqB;AACrB,iBAAiB;AACjB,qBAAqB;AACrB,oBAAoB,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;AAC3D,iBAAiB;AACjB,aAAa;AACb,SAAS,CAAC,CAAC;AACX,QAAQ,OAAO,MAAM,CAAC;AACtB,KAAK;AACL,SAAS,IAAI,WAAW,EAAE;AAC1B,QAAQ,OAAO,KAAK,CAAC;AACrB,KAAK;AACL,SAAS;AACT,QAAQ,OAAO,EAAE,CAAC;AAClB,KAAK;AACL;;;;"}